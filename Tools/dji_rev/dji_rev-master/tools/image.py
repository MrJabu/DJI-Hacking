#!/usr/bin/env python3
#
# Copyright (C) 2017  Freek van Tienen <freek.v.tienen@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function
import sys
import getopt
import re
import os
import hashlib
import binascii
import configparser
import itertools
from Crypto.Cipher import AES
from ctypes import *
from time import gmtime, strftime, strptime
from calendar import timegm
from os.path import basename

# All found keys
keys = {
    # Encryption keys
    "RREK":  bytes([0x37, 0xD6, 0xD9, 0x13, 0xE5, 0xD0, 0x80, 0x17, 0xE5, 0x12, 0x15, 0x45, 0x0C, 0x1E, 0x16, 0xE7]),
    "RIEK":  bytes([0xF1, 0x69, 0xC0, 0xF3, 0x8B, 0x2D, 0x9A, 0xDC, 0x65, 0xEE, 0x0C, 0x57, 0x83, 0x32, 0x94, 0xE9]),
    "RUEK":  bytes([0x9C, 0xDA, 0xF6, 0x27, 0x4E, 0xCB, 0x78, 0xF3, 0xED, 0xDC, 0xE5, 0x26, 0xBC, 0xEC, 0x66, 0xF8]),
    "DRAK":  bytes([0x6f, 0x70, 0x7f, 0x29, 0x62, 0x35, 0x1d, 0x75, 0xbc, 0x08, 0x9a, 0xc3, 0x4d, 0xa1, 0x19, 0xfa]),
    "SAAK":  bytes([0x6f, 0x40, 0x2f, 0xb8, 0x62, 0x52, 0x05, 0xce, 0x9b, 0xdd, 0x58, 0x02, 0x17, 0xd2, 0x18, 0xd8]),
    "PUEK":  bytes([0x63, 0xc4, 0x8e, 0x83, 0x26, 0x7e, 0xee, 0xc0, 0x3f, 0x33, 0x30, 0xad, 0xb2, 0x38, 0xdd, 0x6b]), # New whitebox version
    "_PUEK": bytes([0x70, 0xe0, 0x03, 0x08, 0xe0, 0x4b, 0x0a, 0xe2, 0xce, 0x8e, 0x07, 0xd4, 0xd6, 0x21, 0x4b, 0xb6]), # Old Non-whitebox version

    # RSA keys
    "PRAK":  bytes([0x40, 0x00, 0x00, 0x00, 0xC3, 0x15, 0x16, 0x41, 0x15, 0x7D, 0x30, 0x44, 0x8F, 0xEE, 0x89, 0x58, 0xD6, 0x84, 0x33, 0x2E, 0x8B, 0x28, 0x21, 0x3C, 0xDB, 0x05, 0xC9, 0x23, 0xE0, 0x6A, 0xFE, 0x2D, 0x13, 0x37, 0x1B, 0x48, 0x87, 0xC2, 0x87, 0x2F, 0x7F, 0xD6, 0x74, 0x49, 0x0E, 0x25, 0x00, 0x17, 0x18, 0x3A, 0x9F, 0xCF, 0xB4, 0x10, 0x9F, 0xDD, 0xD8, 0x6A, 0x55, 0x5F, 0xC8, 0x74, 0xB0, 0x8D, 0x64, 0x19, 0xC4, 0xB7, 0xFA, 0x7E, 0x03, 0xB8, 0xF1, 0x06, 0xA0, 0x8F, 0x57, 0x1E, 0x8C, 0x26, 0xA5, 0x32, 0xFC, 0x23, 0xE1, 0xDD, 0x0D, 0x7F, 0xE4, 0xD4, 0x96, 0x52, 0x3B, 0x08, 0xBC, 0x50, 0xD9, 0x23, 0x8A, 0x6B, 0xAA, 0xB5, 0x7D, 0x37, 0xA1, 0x3F, 0x3A, 0xFD, 0x91, 0x28, 0x4C, 0x8B, 0x98, 0xE2, 0xB4, 0x5E, 0xCB, 0x87, 0xBD, 0xCB, 0xE6, 0x91, 0xD8, 0x76, 0x4F, 0x90, 0x77, 0x29, 0x0B, 0x23, 0x6C, 0x0D, 0x8D, 0xF4, 0xB2, 0xEB, 0x3B, 0xA2, 0xF3, 0x66, 0x71, 0x96, 0x7A, 0xEE, 0xFB, 0x4E, 0xC2, 0x63, 0xC9, 0xE4, 0xD7, 0x50, 0x06, 0xD9, 0x7F, 0x60, 0xA5, 0xEB, 0x88, 0x48, 0x4B, 0x42, 0x70, 0x7D, 0x0A, 0x28, 0xB9, 0xA1, 0x16, 0x52, 0x6A, 0xCF, 0x8B, 0xC9, 0x8E, 0x7E, 0x97, 0xAA, 0xA0, 0x9A, 0xA5, 0xE2, 0xC8, 0xB6, 0xAA, 0xAB, 0x7A, 0x2C, 0x21, 0x28, 0x3C, 0x73, 0xD6, 0x68, 0xEC, 0xD7, 0xF0, 0x24, 0xB8, 0xEB, 0xBA, 0xF2, 0x78, 0xA5, 0x87, 0xB6, 0xA0, 0x64, 0x52, 0x5D, 0x07, 0x03, 0xC5, 0xB6, 0x2E, 0x8D, 0xF7, 0xB6, 0x56, 0x59, 0x13, 0xCB, 0x87, 0xFF, 0xB9, 0x6E, 0xE5, 0x78, 0xD8, 0xA5, 0x32, 0x9C, 0x93, 0x83, 0x1C, 0xC1, 0x85, 0x71, 0x04, 0xA4, 0xF2, 0xBA, 0x9D, 0x5B, 0x00, 0x55, 0xA5, 0x03, 0x05, 0xC4, 0x6F, 0x46, 0x9A, 0xD4, 0x64, 0x1A, 0x1F, 0xA9, 0x8F, 0x94, 0x92, 0xBD, 0xFD, 0x94, 0xE0, 0x94, 0xCB, 0xFC, 0xD9, 0x5A, 0xB0, 0x4B, 0xD7, 0xF3, 0x40, 0x00, 0x10, 0xDE, 0xED, 0x20, 0xCF, 0xCD, 0x36, 0x1D, 0xDB, 0x2F, 0x5F, 0xDA, 0x87, 0xAD, 0xA7, 0x28, 0x5A, 0xFB, 0x9C, 0xD7, 0x52, 0x19, 0x53, 0xDA, 0xDB, 0x73, 0xB2, 0x88, 0xED, 0xFB, 0x00, 0xEC, 0xDD, 0x76, 0x9E, 0x78, 0xD2, 0xCA, 0x42, 0x94, 0x64, 0x65, 0x90, 0xC1, 0x8D, 0x59, 0x54, 0xB8, 0x46, 0xD0, 0x0B, 0xFD, 0x68, 0x2E, 0x30, 0xF9, 0x70, 0xE1, 0x0D, 0x1F, 0xE9, 0x60, 0xE7, 0x24, 0x02, 0x3A, 0x05, 0x47, 0x4E, 0xA6, 0x8C, 0xD9, 0x73, 0x8D, 0x58, 0x2F, 0xCB, 0x39, 0x18, 0x56, 0x3A, 0xC8, 0x5B, 0xA6, 0x41, 0x79, 0x64, 0xFF, 0xFA, 0xF1, 0x71, 0x0A, 0x3D, 0x2F, 0x5D, 0x87, 0x0B, 0x50, 0x24, 0x76, 0x48, 0x12, 0xC2, 0xAB, 0x6F, 0xF2, 0x4C, 0xF8, 0x0E, 0xE6, 0xD2, 0x20, 0xC7, 0x16, 0xA3, 0x37, 0xA4, 0xBC, 0xD9, 0xC9, 0x04, 0xE1, 0x7B, 0x5E, 0x9F, 0x22, 0x6E, 0xF6, 0x99, 0x4A, 0x35, 0x06, 0x35, 0xEE, 0x8C, 0x7A, 0x6F, 0x13, 0xD8, 0x20, 0xF9, 0xB8, 0x7C, 0x1E, 0xF8, 0xBA, 0x20, 0x6E, 0x78, 0x56, 0xE1, 0x7E, 0x1D, 0x9A, 0x7E, 0xD6, 0xB7, 0xB2, 0x3C, 0x7C, 0x14, 0x00, 0x9D, 0x96, 0x22, 0xA7, 0x75, 0xDE, 0x57, 0x5F, 0xDC, 0x1D, 0xD1, 0x9E, 0x57, 0xDF, 0x90, 0xC6, 0x5C, 0x81, 0xA8, 0x0C, 0xB0, 0x5F, 0xA7, 0x31, 0x80, 0x80, 0xA6, 0x1D, 0xFF, 0x9B, 0x0D, 0x85, 0x22, 0x67, 0xD6, 0xE8, 0xC6, 0xFD, 0x53, 0x1E, 0x27, 0x87, 0xBA, 0xB7, 0xFF, 0x29, 0x81, 0x8A, 0x38, 0xF2, 0xE6, 0xC2, 0xB4, 0x16, 0x98, 0xF1, 0x1C, 0x3B, 0x2A, 0x0C, 0x4A, 0xC6, 0x6A, 0x96, 0x6A, 0x42, 0xCE, 0x3B, 0xCE, 0x7C, 0x8D, 0x5F, 0x1E, 0xCC, 0x95, 0x43, 0xFF, 0x55, 0xF3, 0x09, 0xDF, 0x3B, 0x01, 0x00, 0x01, 0x00]),
    "RRAK":  bytes([0x40, 0x00, 0x00, 0x00, 0x0F, 0x63, 0x6A, 0x50, 0x11, 0xD4, 0xA9, 0x36, 0xEB, 0x03, 0x47, 0xA6, 0xC5, 0xBF, 0xDE, 0x36, 0x64, 0xF7, 0x9B, 0xB8, 0xA5, 0x98, 0x50, 0xDA, 0x53, 0xB4, 0x11, 0xBA, 0x24, 0x4C, 0xDB, 0x21, 0xD2, 0x3D, 0xB4, 0x98, 0xF5, 0x60, 0xAC, 0xDE, 0xB8, 0x14, 0x3B, 0xED, 0x38, 0x6B, 0x52, 0xF7, 0x8A, 0xA7, 0xB5, 0xF3, 0x84, 0xDA, 0x5C, 0xF2, 0x33, 0xAD, 0x2A, 0xE4, 0x6B, 0xA4, 0xC9, 0xF2, 0xBA, 0x5B, 0x34, 0x8E, 0xA1, 0xB9, 0xB9, 0x3E, 0x38, 0x0E, 0x6E, 0x03, 0xC6, 0x27, 0xBE, 0x7E, 0xA5, 0xE1, 0x1E, 0x5B, 0x25, 0x7D, 0x15, 0x43, 0x7A, 0x15, 0xD4, 0x1E, 0xC3, 0x9A, 0x74, 0xFB, 0xAB, 0x06, 0x41, 0x2B, 0x8F, 0x87, 0x99, 0x1D, 0x4F, 0x16, 0x8D, 0x8F, 0x29, 0x2C, 0x25, 0x3A, 0x3E, 0x5C, 0x97, 0x30, 0x4D, 0x62, 0x5B, 0xE3, 0x5D, 0xFD, 0x8A, 0x14, 0x79, 0xE7, 0xDE, 0xA4, 0x0B, 0x46, 0xE4, 0xC3, 0x70, 0xDF, 0x36, 0x5A, 0x25, 0xEA, 0x15, 0x9C, 0x71, 0x90, 0xD9, 0x89, 0xC9, 0x90, 0xAB, 0xB8, 0x66, 0x91, 0xC8, 0x14, 0xEE, 0xD2, 0xD4, 0x5C, 0xD9, 0xED, 0x2F, 0x4E, 0x69, 0x38, 0x3A, 0xB7, 0xA0, 0x54, 0xCC, 0xDE, 0x6A, 0x78, 0x45, 0xBC, 0xD7, 0xA3, 0x86, 0xB1, 0xCF, 0x3D, 0x8C, 0xDB, 0xF7, 0xCE, 0x86, 0x98, 0x9B, 0x30, 0xB1, 0x1F, 0x2D, 0x38, 0x24, 0x35, 0x52, 0x8C, 0xC7, 0xD3, 0xE5, 0x29, 0x3E, 0x2A, 0xFE, 0xAC, 0xD9, 0x10, 0xBC, 0x59, 0x3B, 0x3A, 0xAB, 0x2B, 0xAA, 0xBF, 0x87, 0x80, 0x8B, 0x81, 0xC9, 0x34, 0xF8, 0x77, 0x08, 0x55, 0x7E, 0x37, 0x10, 0xE2, 0x67, 0x40, 0x13, 0xD5, 0xEB, 0x59, 0x0C, 0x83, 0xF4, 0x62, 0x85, 0x80, 0xD2, 0x71, 0x14, 0xD1, 0xB6, 0x1C, 0x5E, 0x6E, 0x6A, 0x33, 0x53, 0x89, 0xD4, 0x56, 0xE2, 0x47, 0xF4, 0xB8, 0x1A, 0x86, 0x58, 0xD0, 0xA5, 0xDC, 0xF2, 0x3A, 0xC8, 0xBD, 0x86, 0x7A, 0x1F, 0x25, 0x29, 0x71, 0x54, 0xAB, 0xF0, 0x6C, 0xE9, 0x95, 0x4B, 0x4D, 0xB5, 0xBF, 0xC0, 0x63, 0x04, 0x73, 0xD9, 0x85, 0xF5, 0x05, 0x9C, 0xD9, 0x09, 0x51, 0x6A, 0xD6, 0x89, 0x77, 0x39, 0xF3, 0x61, 0x1F, 0xEC, 0xE7, 0xA6, 0xC2, 0xDD, 0xCE, 0x9C, 0x8F, 0x41, 0x86, 0x14, 0xFF, 0x2C, 0x64, 0x11, 0x43, 0xE6, 0xE2, 0x38, 0xAE, 0x15, 0xE9, 0x53, 0xB0, 0x81, 0xD3, 0x1A, 0x35, 0xB9, 0x85, 0x52, 0x1D, 0x3E, 0x96, 0x51, 0xD7, 0xB3, 0x72, 0x2D, 0xCC, 0xFB, 0x04, 0x78, 0xDC, 0xDA, 0x36, 0x93, 0xA7, 0xB8, 0xBE, 0x0D, 0x69, 0x75, 0x75, 0x91, 0x41, 0x51, 0x88, 0xC1, 0x2A, 0x1D, 0xD9, 0x9C, 0x53, 0xC7, 0x1A, 0xFA, 0x75, 0x25, 0x94, 0xB5, 0xED, 0xB3, 0xC5, 0xCC, 0x64, 0xBD, 0x6F, 0x4D, 0xAF, 0x68, 0x1A, 0xFE, 0x17, 0xD4, 0xC1, 0xC4, 0x8C, 0x82, 0xEF, 0x5B, 0x1C, 0x71, 0x06, 0x97, 0x25, 0x03, 0xE9, 0xDE, 0xF3, 0xFE, 0x93, 0xF2, 0xDF, 0x77, 0xBE, 0xC5, 0xB5, 0x80, 0xA6, 0x19, 0xFF, 0x16, 0xB5, 0x36, 0x09, 0xC3, 0xE0, 0xFC, 0x74, 0x71, 0x9D, 0xB7, 0x60, 0x4D, 0x3D, 0x57, 0x66, 0xB1, 0x4A, 0x08, 0xBE, 0x33, 0x54, 0x3C, 0x86, 0xE2, 0x19, 0xDD, 0x09, 0x83, 0x2E, 0xEB, 0xEB, 0x4B, 0x8A, 0x13, 0xF7, 0x8F, 0xE3, 0x4A, 0x1C, 0x51, 0x22, 0x29, 0x35, 0xCC, 0x4B, 0xCF, 0x05, 0x71, 0x7A, 0x36, 0x62, 0x1B, 0x43, 0x21, 0x74, 0xC7, 0x09, 0x77, 0xF7, 0x18, 0x8A, 0xCB, 0x2E, 0x37, 0x3D, 0xCD, 0xFF, 0xCC, 0x71, 0x90, 0x19, 0xFD, 0x14, 0x8E, 0xF2, 0x63, 0xFC, 0x21, 0x72, 0xD1, 0x00, 0x2B, 0x80, 0x0C, 0xC5, 0xC2, 0x39, 0x52, 0x24, 0xEF, 0x23, 0xBA, 0xF4, 0x4A, 0xD5, 0x1B, 0xD6, 0x47, 0x40, 0x71, 0xAB, 0x01, 0x00, 0x01, 0x00]),
    "GFAK":  bytes([0x40, 0x00, 0x00, 0x00, 0x9B, 0x57, 0xA8, 0x88, 0x6D, 0xC9, 0x3E, 0x04, 0x1E, 0x14, 0x80, 0x8E, 0x38, 0xD8, 0x10, 0x37, 0x6D, 0x97, 0x69, 0x48, 0xE8, 0x78, 0x4B, 0x4A, 0xC0, 0x46, 0x48, 0x81, 0xFC, 0xC3, 0xAB, 0x99, 0xC6, 0x12, 0x75, 0x39, 0x1E, 0xC9, 0x63, 0xEB, 0xD5, 0x8E, 0x3D, 0x6A, 0x4E, 0xC4, 0x60, 0xFC, 0x1A, 0xE1, 0xDB, 0x27, 0x0D, 0x9C, 0xF8, 0x70, 0xFC, 0x87, 0x9E, 0x63, 0x3B, 0x71, 0x99, 0xE6, 0xA2, 0xF4, 0x87, 0x2E, 0xFA, 0xFC, 0x1D, 0xF2, 0x73, 0x74, 0xB3, 0x02, 0x19, 0x35, 0x3F, 0x21, 0xD8, 0x97, 0x2E, 0x75, 0xFE, 0xB5, 0x04, 0x0A, 0x50, 0xB2, 0x48, 0x2F, 0x25, 0x65, 0x91, 0xDF, 0x63, 0xC6, 0xAA, 0x56, 0xA6, 0x33, 0x06, 0xB2, 0x96, 0xCE, 0x11, 0x8F, 0xB4, 0x3A, 0x2E, 0x15, 0x92, 0xA3, 0x5A, 0x45, 0x79, 0x04, 0x49, 0x13, 0xA4, 0x7F, 0xA1, 0xC6, 0x84, 0x3F, 0xFA, 0x05, 0x7F, 0xB4, 0x1B, 0x7D, 0x09, 0xE4, 0xA9, 0x5D, 0x21, 0x8A, 0xBC, 0x39, 0xC6, 0x6C, 0xE2, 0x96, 0x86, 0x25, 0xE8, 0xA8, 0x42, 0x65, 0xFE, 0xF9, 0x51, 0xBA, 0xB8, 0xAA, 0x23, 0xB2, 0x85, 0x9F, 0xDF, 0xFC, 0x26, 0x42, 0x6A, 0xCE, 0x8D, 0xC9, 0x3F, 0xDD, 0x4C, 0x63, 0x84, 0xF5, 0x68, 0x74, 0x40, 0xDD, 0x3B, 0xC8, 0xC7, 0x18, 0x9E, 0xD6, 0xD4, 0x63, 0xA9, 0xB5, 0x46, 0x8F, 0x4D, 0x70, 0xD5, 0x4D, 0xFD, 0x76, 0xE6, 0x80, 0xAD, 0xC8, 0xFF, 0x84, 0xC3, 0x94, 0x41, 0x6E, 0x7D, 0x1F, 0x3A, 0x23, 0x78, 0xF9, 0x93, 0xEF, 0xC4, 0x8A, 0x29, 0x99, 0x5A, 0xCD, 0x17, 0x58, 0x30, 0x06, 0x74, 0xA2, 0x70, 0xC3, 0x0C, 0xEA, 0xCC, 0x1D, 0xF6, 0x8A, 0x3F, 0x52, 0xCA, 0x67, 0x12, 0xE8, 0xEA, 0xBA, 0xCF, 0x44, 0xF1, 0x05, 0x19, 0xB9, 0xE3, 0x20, 0x31, 0x90, 0xC4, 0xE8, 0xE8, 0xA9, 0xBF, 0x87, 0xF1, 0xC9, 0x49, 0x28, 0x38, 0xF0, 0xE7, 0xA4, 0x2C, 0x66, 0x51, 0x73, 0x14, 0x4D, 0x03, 0xD4, 0x75, 0xF1, 0xD9, 0x47, 0x94, 0x93, 0x7B, 0xB2, 0xDA, 0x80, 0x97, 0xB6, 0xCE, 0xD0, 0xF9, 0xD3, 0x70, 0xAA, 0x57, 0x8A, 0xA9, 0x2C, 0x29, 0x7A, 0x19, 0xCD, 0x5A, 0x08, 0x54, 0xE9, 0x7C, 0xF5, 0xA9, 0xD3, 0x5F, 0x66, 0x45, 0x81, 0x9A, 0x16, 0x07, 0x18, 0xF6, 0xC2, 0x07, 0x02, 0xD3, 0x5D, 0x42, 0x40, 0xAE, 0x9B, 0x0D, 0x24, 0x84, 0x06, 0x59, 0x73, 0x89, 0x0E, 0xDD, 0xB4, 0xA8, 0xB4, 0xBE, 0x19, 0xA8, 0xCD, 0xD7, 0xCC, 0x52, 0x55, 0x71, 0x07, 0xA6, 0x5D, 0x2F, 0xC1, 0xBF, 0xE3, 0xC8, 0x7A, 0x16, 0x5D, 0x68, 0xAD, 0x2F, 0x59, 0x01, 0x39, 0x01, 0x41, 0xC0, 0xFB, 0xF1, 0xAE, 0xF7, 0xB2, 0xA8, 0x9E, 0xDD, 0x75, 0x07, 0x57, 0x9B, 0x64, 0x83, 0x87, 0xB9, 0x4E, 0xBA, 0xE2, 0xF1, 0x5C, 0x96, 0xFE, 0x1E, 0x5E, 0xCF, 0xF8, 0xCC, 0x85, 0xCE, 0x73, 0xA6, 0xF6, 0x7C, 0xD7, 0x26, 0x0B, 0xC7, 0x38, 0x98, 0x07, 0xEC, 0xBA, 0xED, 0xBA, 0x05, 0x93, 0x16, 0x8A, 0x03, 0xEE, 0xBB, 0x48, 0x05, 0xFC, 0xC2, 0xB5, 0xB7, 0x2B, 0x16, 0xE3, 0xFD, 0x8E, 0x97, 0x62, 0xFC, 0x7B, 0xE1, 0x0B, 0x74, 0x85, 0xD9, 0x8D, 0x09, 0x86, 0xA8, 0x13, 0xD7, 0x77, 0xFE, 0xA8, 0x08, 0x24, 0x6D, 0x7E, 0x1A, 0x2A, 0x59, 0x87, 0x17, 0xDD, 0xDD, 0xC2, 0x51, 0x01, 0x3D, 0x68, 0x78, 0x5E, 0x30, 0x8E, 0x36, 0xD4, 0x62, 0x13, 0x9F, 0xD3, 0xA0, 0x6A, 0xD0, 0xC7, 0x49, 0x3B, 0x1A, 0x1A, 0x95, 0x82, 0xDE, 0xD7, 0x96, 0x55, 0x88, 0xFD, 0x39, 0x55, 0x56, 0xEA, 0x91, 0x13, 0xA8, 0x14, 0x7C, 0x47, 0xED, 0xAF, 0xE4, 0x5A, 0x30, 0xA8, 0xB7, 0xDA, 0xCE, 0x0D, 0xED, 0x9E, 0x47, 0x32, 0x93, 0x80, 0x01, 0x00, 0x01, 0x00]),
}

def eprint(*args, **kwargs):
  print(*args, file=sys.stderr, **kwargs)

class ImgPkgHeader(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [('magic', c_char * 4),              #0
                ('header_version', c_uint),         #4
                ('size', c_uint),                   #8
                ('reserved', c_char * 4),           #12
                ('header_size', c_uint),            #16
                ('signature_size', c_uint),         #20
                ('payload_size', c_uint),           #24
                ('target_size', c_uint),            #28
                ('os', c_ubyte),                    #32
                ('arch', c_ubyte),                  #33
                ('compression', c_ubyte),           #34
                ('anti_version', c_ubyte),          #35
                ('auth_alg', c_uint),               #36
                ('auth_key', c_char * 4),           #40
                ('enc_key', c_char * 4),            #44
                ('scram_key', c_ubyte * 16),        #48
                ('name', c_char * 32),              #64
                ('type', c_uint),                   #96
                ('version', c_uint),                #100
                ('date', c_uint),                   #104
                ('reserved2', c_char * 20),         #108
                ('userdata', c_char * 16),          #128
                ('entry', c_char * 8),              #144
                ('reserved3', c_char * 4),          #152
                ('chunk_num', c_uint),              #156
                ('sha256_payload', c_ubyte * 32)]   #160 end is 192

    def dict_export(self):
        d = dict()
        for (varkey, vartype) in self._fields_:
            if not varkey.startswith('unk'):
                d[varkey] = getattr(self, varkey)
        return d

    def __repr__(self):
        d = self.dict_export()
        from pprint import pformat
        return pformat(d, indent=4, width=1)

class ImgChunkHeader(LittleEndianStructure):
    _pack_ = 1
    _fields_ = [('id', c_char * 4),          #0
                ('offset', c_uint),          #4
                ('size', c_uint),            #8
                ('attrib', c_uint),          #12
                ('address', c_ulonglong),    #16
                ('reserved', c_char * 8)]    #24 end is 32

    def dict_export(self):
        d = dict()
        for (varkey, vartype) in self._fields_:
            if not varkey.startswith('unk'):
                d[varkey] = getattr(self, varkey)
        return d

    def __repr__(self):
        d = self.dict_export()
        from pprint import pformat
        return pformat(d, indent=4, width=1)


def main(argv):
    filname_wo_ext = os.path.splitext(basename(argv[0]))[0]
    image_file = open(argv[0], "rb")

    # Decode the image header
    header = ImgPkgHeader()
    if image_file.readinto(header) != sizeof(header):
        raise EOFError("Couldn't read image file header.")

    # Check the magic
    if header.magic != bytes("IM*H", "utf-8"):
        print("Magic isn't correct in the header")
        return

    print("Unpacking image...")
    print(header)

    # Get the encryption keys
    enc_k_str = header.enc_key.decode("utf-8")
    enc_key = None
    if enc_k_str in keys:
        enc_key = keys[enc_k_str]
    else:
        print("Can't find enc_key " + enc_k_str)


    # Decode the chunks of the image
    chunks = []
    for i in range(0, header.chunk_num):
        chunk = ImgChunkHeader()
        if image_file.readinto(chunk) != sizeof(chunk):
            raise EOFError("Couldn't read image chunk " + i + " header.")
        chunks.append(chunk)

    # Output the chunks
    for chunk in chunks:

        # Not encrypted chunk
        if (chunk.attrib & 0x01):
            image_file.seek(header.header_size + header.signature_size + chunk.offset, 0)
            file_buffer = image_file.read(chunk.size)
            output_file = open(filname_wo_ext + '_' + chunk.id.decode("utf-8") + '.bin', "wb")
            output_file.write(file_buffer)
            output_file.close()
            print("\nUnpacking chunk...")
            print(str(chunk))

        # Encrypted chunk (have key as well)
        elif enc_key != None:
            # Set the key
            if header.header_version == 1:
                cipher = AES.new(enc_key, AES.MODE_CBC, bytes([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
                scram_key = cipher.decrypt(header.scram_key)
                cipher_scrmb = AES.new(scram_key, AES.MODE_CBC, bytes([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
            else:
                cipher_scrmb = AES.new(enc_key, AES.MODE_CBC, header.scram_key)

            # Decrypt the data
            image_file.seek(header.header_size + header.signature_size + chunk.offset, 0)
            pad_cnt = (AES.block_size - chunk.size % AES.block_size) % AES.block_size
            enc_buffer = image_file.read(chunk.size + pad_cnt)
            dec_buffer = cipher_scrmb.decrypt(enc_buffer)
            output_file = open(filname_wo_ext + '_' + chunk.id.decode("utf-8") + '.bin', "wb")
            output_file.write(dec_buffer[:chunk.size])
            output_file.close()
            print("\nUnpacking encrypted chunk...")
            print(str(chunk))
        # Missing encryption key
        else:
            print("\nCan't unpack encrypted chunk! Missing key: " + enc_k_str)
            print(str(chunk))

    image_file.close()

if __name__ == "__main__":
   main(sys.argv[1:])